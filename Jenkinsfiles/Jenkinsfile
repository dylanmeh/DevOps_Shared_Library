def props = [:]
pipeline {
    agent {
        yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: alpine-docker
            image: 'dylanmehmedovic/apline-docker:latest'
            command:
            - cat
            tty: true
            '''
    }
    triggers {
        eventTrigger jmespathQuery()
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_creds')
    }
    stages {
        stage('declare properties file') {
            script {
                container('alpine-docker') {
                    props = readProperties(file: 'build.properties')
                }
            }
        }
        stage('build docker images') {
            container('alpine-docker') {
                git credentialsId: 'GitHub_Creds' url: 'https://github.com/dylanmeh/DevOps_Dockerfiles.git'
                sh '''
                cd Dockerfiles/Maven
                docker build -t dylanmehmedovic/alpine-docker .
                echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                docker push dylanmehmedovic/alpine-docker
                cd ../Gradle
                docker build -t dylanmehmedovic/alpine-docker .
                echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                docker push dylanmehmedovic/alpine-docker
                '''
            }    
        }
        stage('build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
            post {
                success {
                    archiveArtifacts(artifacts: 'target/*.jar')
                }
            }       
        }
        stage('unit tests') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/test-reports/*.xml'
                }
            }
        }
        stage('prepare environment') {
            steps {
                sh 'terraform apply -auto-approve'
            }
        }
        stage('deploy stage') {
            steps {
                sh 'echo "scp build artifact to EC2 Apache Tomcat Server, then redtart apache service"'
            }
        }
    }
}
